package edu.hubanato.forms;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 * This class is used to create the Amortization Schedule form
 * @author Tony
 */
public class AmortizationScheduleForm extends javax.swing.JFrame {

    private DefaultCategoryDataset datasetLineChartAmount, datasetBarChartGlobal;
    private DefaultPieDataset datasetPieChartGlobal = new DefaultPieDataset();

    /**
     * The constructor initializes the different datasets.
     */
    public AmortizationScheduleForm() {
        initComponents();
        datasetLineChartAmount = new DefaultCategoryDataset();
        datasetBarChartGlobal = new DefaultCategoryDataset();
        datasetPieChartGlobal = new DefaultPieDataset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        amortizationTable = new javax.swing.JTable();
        printButton = new javax.swing.JButton();
        labelAmount = new javax.swing.JLabel();
        labelDuration = new javax.swing.JLabel();
        labelRate = new javax.swing.JLabel();
        labelInsurance = new javax.swing.JLabel();
        buttonGraph = new javax.swing.JButton();
        labelTotalWithoutInsurance = new javax.swing.JLabel();
        labelTotalInterest = new javax.swing.JLabel();
        labelTotalInsurance = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(580, 480));

        amortizationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mois", "Capital amorti", "Intérêts", "Capital restant", "Mensualité", "Assurance", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(amortizationTable);

        printButton.setText("Imprimer");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        labelAmount.setText("Montant de l'emprunt: ");

        labelDuration.setText("Durée du prêt: ");

        labelRate.setText("Taux annuel: ");

        labelInsurance.setText("Taux d'assurance: ");

        buttonGraph.setText("Graphe");
        buttonGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGraphActionPerformed(evt);
            }
        });

        labelTotalWithoutInsurance.setText("Total mensualités hors assurance:  ");

        labelTotalInterest.setText("Total intérêts: ");

        labelTotalInsurance.setText("Total assurance: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAmount)
                    .addComponent(labelDuration)
                    .addComponent(labelRate)
                    .addComponent(labelInsurance)
                    .addComponent(labelTotalWithoutInsurance)
                    .addComponent(labelTotalInterest)
                    .addComponent(labelTotalInsurance))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(printButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonGraph)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelAmount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelDuration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelInsurance)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelTotalWithoutInsurance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTotalInterest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTotalInsurance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printButton)
                    .addComponent(buttonGraph))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is activated by clicking on the "Print" button.
     * It allows the customer to print the amortization schedule. 
     */
    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed

        try {
            /* print the table */
            boolean complete = this.amortizationTable.print();

            /* if printing completes */
            if (complete) {
                /* show a success message */
                JOptionPane.showMessageDialog(this,
                        "Impression envoyé",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                /* show a message indicating that printing was cancelled */
                JOptionPane.showMessageDialog(this,
                        "Impression annulée",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (PrinterException pe) {
            /* Printing failed, report to the user */
            JOptionPane.showMessageDialog(this,
                    "Impression échouée: " + pe.getMessage(),
                    "Information",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * This method is activated by clicking on the "Graph" button.
     * It displays the different graphs and includes a print button.
     */
    private void buttonGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGraphActionPerformed
        JFrame graphFrame = new JFrame();
        graphFrame.setTitle("Graph");
        graphFrame.setSize(400, 300);
        graphFrame.setLocationRelativeTo(null);

        //Creates JPanel
        JPanel pan = new JPanel();
        pan.setLayout(new GridBagLayout());

        //Creates GridBagCinstraints to place elements on the screen
        GridBagConstraints gbc = new GridBagConstraints();

        //Set up the starting position
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 1;
        gbc.gridwidth = 1;

        //Start of First graph: LineChart
        JFreeChart lineChartAmount = ChartFactory.createLineChart(
                "Reste  à payer(Montant)",
                "Année", "Montant",
                dataImportLineChart(),
                PlotOrientation.VERTICAL,
                true, true, false);

        ChartPanel pan1 = new ChartPanel(lineChartAmount, false);
        //pan1.setBounds(0, 0, 300, 300);

        pan1.addMouseMotionListener(new MouseAdapter() {
            public void mouseMoved(MouseEvent me) {
                pan1.getEntityForPoint(me.getX(), me.getY());
            }
        });
        //End of First Graph

        //Start of Second Graph: BarChart
        JFreeChart barChartGlobal = ChartFactory.createBarChart(
                "Payé (Total)",
                "Année",
                "Montant",
                dataImportBarChartGlobal(),
                PlotOrientation.VERTICAL,
                true, true, false);

        ChartPanel pan2 = new ChartPanel(barChartGlobal, false);
        //pan2.setBounds(400, 350, 350, 350);

        pan2.addMouseMotionListener(new MouseAdapter() {
            public void mouseMoved(MouseEvent me) {
                pan2.getEntityForPoint(me.getX(), me.getY());
            }
        });
        //End of Second Graph

        //Third Graph: PieChart
        JFreeChart pieChartGlobal = ChartFactory.createPieChart(
                "Répartition",
                dataImportPieChartGlobal(),
                true,
                true,
                false);

        ChartPanel pan3 = new ChartPanel(pieChartGlobal, false);

        pan3.addMouseMotionListener(new MouseAdapter() {
            public void mouseMoved(MouseEvent me) {
                pan3.getEntityForPoint(me.getX(), me.getY());
            }
        });
        //End of Third Graph

        pan1.setPreferredSize(new Dimension(500, 200));
        pan2.setPreferredSize(new Dimension(500, 200));
        pan3.setPreferredSize(new Dimension(500, 200));

        gbc.gridx = 0;
        gbc.gridy = 0;
        pan.add(pan1, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        pan.add(pan2, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        pan.add(pan3, gbc);

        JButton buttonPrint = new JButton("Imprimer");

        gbc.gridx = 2;
        gbc.gridy = 1;
        pan.add(buttonPrint, gbc);

        graphFrame.setContentPane(pan);
        graphFrame.pack();
        graphFrame.setVisible(true);

        //Adding a button to print the graphs
        buttonPrint.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                buttonPrint.setVisible(false);
                PrinterJob pj = PrinterJob.getPrinterJob();
                pj.setJobName(" Print Component ");

                pj.setPrintable(new Printable() {
                    public int print(Graphics pg, PageFormat pf, int pageNum) {
                        if (pageNum > 0) {
                            return Printable.NO_SUCH_PAGE;
                        }

                        Graphics2D g2 = (Graphics2D) pg;
                        g2.translate(pf.getImageableX(), pf.getImageableY());
                        pan.paint(g2);
                        return Printable.PAGE_EXISTS;
                    }
                });
                if (pj.printDialog() == false) {
                    buttonPrint.setVisible(true);
                    return;
                }

                try {
                    pj.print();
                } catch (PrinterException ex) {
                    buttonPrint.setVisible(true);
                }
                buttonPrint.setVisible(true);
            }

        });

        this.setVisible(true);
    }//GEN-LAST:event_buttonGraphActionPerformed

    /**
        * @return the dataset of the LineChart.
    */
    private DefaultCategoryDataset dataImportLineChart() {
        return datasetLineChartAmount;
    }

    /**
        * @return the dataset of the BarChart.
    */
    private DefaultCategoryDataset dataImportBarChartGlobal() {
        return datasetBarChartGlobal;
    }

    /**
        * @return the dataset of the PieChart.
    */
    private DefaultPieDataset dataImportPieChartGlobal() {
        return datasetPieChartGlobal;
    }

    /**
     * This method insert the parameters into the dataset used by the LineChart.
     * @param amount
        * Amount already paid of the loan for a month.
     * @param month
        * Month concerned.
    */
    public void insertDataToLineChartAmount(double amount, int month) {
        datasetLineChartAmount.addValue(amount, "Montant", String.valueOf(month / 12));
    }

    /**
     * This method insert the parameters into the dataset used by the BarChart.
     * @param amount
        * Amount that the client will have paid for the month.
     * @param label 
        * Name of the type: Insurance/Interest/Amount.
     * @param month
        * Month concerned.
    */
    public void insertDataToBarChartGlobal(double amount, String label, int month) {
        datasetBarChartGlobal.addValue(amount, label, String.valueOf(month / 12));
    }

    /**
     * This method insert the parameters into the dataset used by the PieChart.
     * @param label
        * Name of the type: Insurance/Interest/Amount.
     * @param amount 
        * Amount that the client has to pay for the label.
    */
    public void insertDataToPieChartGlobal(String label, double amount) {
        datasetPieChartGlobal.setValue(label, amount);
    }

    /**
     * @return  The amortization schedule which is a JTable.
    */
    public JTable getTable() {
        return amortizationTable;
    }

    /**
     * @return The label used to display the amount of loan.
    */
    public JLabel getLabelAMount() {
        return labelAmount;
    }

    /**
     * @return The label used to display the duration of loan.
    */
    public JLabel getLabelDuration() {
        return labelDuration;
    }

    /**
     * @return The label used to display the insurance rate of loan.
    */
    public JLabel getLabelInsurance() {
        return labelInsurance;
    }

    /**
     * @return The label used to display the rate of loan.
    */
    public JLabel getLabelRate() {
        return labelRate;
    }

    /**
     * @return The label used to display the amount of insurance paid for the loan.
    */
    public JLabel getLabelTotalInsurance() {
        return labelTotalInsurance;
    }

    /**
     * @return The label used to display the amount of interest paid for the loan.
    */
    public JLabel getLabelTotalInterest() {
        return labelTotalInterest;
    }

    /**
     * @return The label used to display the amount paid for the loan excluding insurance.
    */
    public JLabel getLabelTotalWithoutInterest() {
        return labelTotalWithoutInsurance;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable amortizationTable;
    private javax.swing.JButton buttonGraph;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelDuration;
    private javax.swing.JLabel labelInsurance;
    private javax.swing.JLabel labelRate;
    private javax.swing.JLabel labelTotalInsurance;
    private javax.swing.JLabel labelTotalInterest;
    private javax.swing.JLabel labelTotalWithoutInsurance;
    private javax.swing.JButton printButton;
    // End of variables declaration//GEN-END:variables

}
